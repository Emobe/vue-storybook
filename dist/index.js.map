{"version":3,"sources":["../node_modules/json5/lib/json5.js","../node_modules/webpack-parse-query/index.js","../node_modules/serialize-javascript/index.js","loader.js","util.js","register.js","index.js"],"names":["generateCode","source","ctx","code","query","resourceQuery","story","template","trim","name","group","methods","notes","knobs","loader","callback","upperFirst","str","charAt","toUpperCase","slice","camelCase","s","match","map","x","toLowerCase","join","parseKnobsObject","obj","plugins","Function","getComponentNameFromFilename","fileName","replace","registerStories","req","sbInstance","action","withKnobs","text","color","select","boolean","componentConfig","componentName","stories","__stories","default","forEach","storiesOf","module","addDecorator","add","data","components","props","payload","storyLoader"],"mappings":"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","file":"index.js","sourceRoot":"../src","sourcesContent":["// json5.js\n// Modern JSON. See README.md for details.\n//\n// This file is based directly off of Douglas Crockford's json_parse.js:\n// https://github.com/douglascrockford/JSON-js/blob/master/json_parse.js\n\nvar JSON5 = (typeof exports === 'object' ? exports : {});\n\nJSON5.parse = (function () {\n    \"use strict\";\n\n// This is a function that can parse a JSON5 text, producing a JavaScript\n// data structure. It is a simple, recursive descent parser. It does not use\n// eval or regular expressions, so it can be used as a model for implementing\n// a JSON5 parser in other languages.\n\n// We are defining the function inside of another function to avoid creating\n// global variables.\n\n    var at,           // The index of the current character\n        lineNumber,   // The current line number\n        columnNumber, // The current column number\n        ch,           // The current character\n        escapee = {\n            \"'\":  \"'\",\n            '\"':  '\"',\n            '\\\\': '\\\\',\n            '/':  '/',\n            '\\n': '',       // Replace escaped newlines in strings w/ empty string\n            b:    '\\b',\n            f:    '\\f',\n            n:    '\\n',\n            r:    '\\r',\n            t:    '\\t'\n        },\n        ws = [\n            ' ',\n            '\\t',\n            '\\r',\n            '\\n',\n            '\\v',\n            '\\f',\n            '\\xA0',\n            '\\uFEFF'\n        ],\n        text,\n\n        renderChar = function (chr) {\n            return chr === '' ? 'EOF' : \"'\" + chr + \"'\";\n        },\n\n        error = function (m) {\n\n// Call error when something is wrong.\n\n            var error = new SyntaxError();\n            // beginning of message suffix to agree with that provided by Gecko - see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse\n            error.message = m + \" at line \" + lineNumber + \" column \" + columnNumber + \" of the JSON5 data. Still to read: \" + JSON.stringify(text.substring(at - 1, at + 19));\n            error.at = at;\n            // These two property names have been chosen to agree with the ones in Gecko, the only popular\n            // environment which seems to supply this info on JSON.parse\n            error.lineNumber = lineNumber;\n            error.columnNumber = columnNumber;\n            throw error;\n        },\n\n        next = function (c) {\n\n// If a c parameter is provided, verify that it matches the current character.\n\n            if (c && c !== ch) {\n                error(\"Expected \" + renderChar(c) + \" instead of \" + renderChar(ch));\n            }\n\n// Get the next character. When there are no more characters,\n// return the empty string.\n\n            ch = text.charAt(at);\n            at++;\n            columnNumber++;\n            if (ch === '\\n' || ch === '\\r' && peek() !== '\\n') {\n                lineNumber++;\n                columnNumber = 0;\n            }\n            return ch;\n        },\n\n        peek = function () {\n\n// Get the next character without consuming it or\n// assigning it to the ch varaible.\n\n            return text.charAt(at);\n        },\n\n        identifier = function () {\n\n// Parse an identifier. Normally, reserved words are disallowed here, but we\n// only use this for unquoted object keys, where reserved words are allowed,\n// so we don't check for those here. References:\n// - http://es5.github.com/#x7.6\n// - https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Core_Language_Features#Variables\n// - http://docstore.mik.ua/orelly/webprog/jscript/ch02_07.htm\n// TODO Identifiers can have Unicode \"letters\" in them; add support for those.\n\n            var key = ch;\n\n            // Identifiers must start with a letter, _ or $.\n            if ((ch !== '_' && ch !== '$') &&\n                    (ch < 'a' || ch > 'z') &&\n                    (ch < 'A' || ch > 'Z')) {\n                error(\"Bad identifier as unquoted key\");\n            }\n\n            // Subsequent characters can contain digits.\n            while (next() && (\n                    ch === '_' || ch === '$' ||\n                    (ch >= 'a' && ch <= 'z') ||\n                    (ch >= 'A' && ch <= 'Z') ||\n                    (ch >= '0' && ch <= '9'))) {\n                key += ch;\n            }\n\n            return key;\n        },\n\n        number = function () {\n\n// Parse a number value.\n\n            var number,\n                sign = '',\n                string = '',\n                base = 10;\n\n            if (ch === '-' || ch === '+') {\n                sign = ch;\n                next(ch);\n            }\n\n            // support for Infinity (could tweak to allow other words):\n            if (ch === 'I') {\n                number = word();\n                if (typeof number !== 'number' || isNaN(number)) {\n                    error('Unexpected word for number');\n                }\n                return (sign === '-') ? -number : number;\n            }\n\n            // support for NaN\n            if (ch === 'N' ) {\n              number = word();\n              if (!isNaN(number)) {\n                error('expected word to be NaN');\n              }\n              // ignore sign as -NaN also is NaN\n              return number;\n            }\n\n            if (ch === '0') {\n                string += ch;\n                next();\n                if (ch === 'x' || ch === 'X') {\n                    string += ch;\n                    next();\n                    base = 16;\n                } else if (ch >= '0' && ch <= '9') {\n                    error('Octal literal');\n                }\n            }\n\n            switch (base) {\n            case 10:\n                while (ch >= '0' && ch <= '9' ) {\n                    string += ch;\n                    next();\n                }\n                if (ch === '.') {\n                    string += '.';\n                    while (next() && ch >= '0' && ch <= '9') {\n                        string += ch;\n                    }\n                }\n                if (ch === 'e' || ch === 'E') {\n                    string += ch;\n                    next();\n                    if (ch === '-' || ch === '+') {\n                        string += ch;\n                        next();\n                    }\n                    while (ch >= '0' && ch <= '9') {\n                        string += ch;\n                        next();\n                    }\n                }\n                break;\n            case 16:\n                while (ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'F' || ch >= 'a' && ch <= 'f') {\n                    string += ch;\n                    next();\n                }\n                break;\n            }\n\n            if(sign === '-') {\n                number = -string;\n            } else {\n                number = +string;\n            }\n\n            if (!isFinite(number)) {\n                error(\"Bad number\");\n            } else {\n                return number;\n            }\n        },\n\n        string = function () {\n\n// Parse a string value.\n\n            var hex,\n                i,\n                string = '',\n                delim,      // double quote or single quote\n                uffff;\n\n// When parsing for string values, we must look for ' or \" and \\ characters.\n\n            if (ch === '\"' || ch === \"'\") {\n                delim = ch;\n                while (next()) {\n                    if (ch === delim) {\n                        next();\n                        return string;\n                    } else if (ch === '\\\\') {\n                        next();\n                        if (ch === 'u') {\n                            uffff = 0;\n                            for (i = 0; i < 4; i += 1) {\n                                hex = parseInt(next(), 16);\n                                if (!isFinite(hex)) {\n                                    break;\n                                }\n                                uffff = uffff * 16 + hex;\n                            }\n                            string += String.fromCharCode(uffff);\n                        } else if (ch === '\\r') {\n                            if (peek() === '\\n') {\n                                next();\n                            }\n                        } else if (typeof escapee[ch] === 'string') {\n                            string += escapee[ch];\n                        } else {\n                            break;\n                        }\n                    } else if (ch === '\\n') {\n                        // unescaped newlines are invalid; see:\n                        // https://github.com/aseemk/json5/issues/24\n                        // TODO this feels special-cased; are there other\n                        // invalid unescaped chars?\n                        break;\n                    } else {\n                        string += ch;\n                    }\n                }\n            }\n            error(\"Bad string\");\n        },\n\n        inlineComment = function () {\n\n// Skip an inline comment, assuming this is one. The current character should\n// be the second / character in the // pair that begins this inline comment.\n// To finish the inline comment, we look for a newline or the end of the text.\n\n            if (ch !== '/') {\n                error(\"Not an inline comment\");\n            }\n\n            do {\n                next();\n                if (ch === '\\n' || ch === '\\r') {\n                    next();\n                    return;\n                }\n            } while (ch);\n        },\n\n        blockComment = function () {\n\n// Skip a block comment, assuming this is one. The current character should be\n// the * character in the /* pair that begins this block comment.\n// To finish the block comment, we look for an ending */ pair of characters,\n// but we also watch for the end of text before the comment is terminated.\n\n            if (ch !== '*') {\n                error(\"Not a block comment\");\n            }\n\n            do {\n                next();\n                while (ch === '*') {\n                    next('*');\n                    if (ch === '/') {\n                        next('/');\n                        return;\n                    }\n                }\n            } while (ch);\n\n            error(\"Unterminated block comment\");\n        },\n\n        comment = function () {\n\n// Skip a comment, whether inline or block-level, assuming this is one.\n// Comments always begin with a / character.\n\n            if (ch !== '/') {\n                error(\"Not a comment\");\n            }\n\n            next('/');\n\n            if (ch === '/') {\n                inlineComment();\n            } else if (ch === '*') {\n                blockComment();\n            } else {\n                error(\"Unrecognized comment\");\n            }\n        },\n\n        white = function () {\n\n// Skip whitespace and comments.\n// Note that we're detecting comments by only a single / character.\n// This works since regular expressions are not valid JSON(5), but this will\n// break if there are other valid values that begin with a / character!\n\n            while (ch) {\n                if (ch === '/') {\n                    comment();\n                } else if (ws.indexOf(ch) >= 0) {\n                    next();\n                } else {\n                    return;\n                }\n            }\n        },\n\n        word = function () {\n\n// true, false, or null.\n\n            switch (ch) {\n            case 't':\n                next('t');\n                next('r');\n                next('u');\n                next('e');\n                return true;\n            case 'f':\n                next('f');\n                next('a');\n                next('l');\n                next('s');\n                next('e');\n                return false;\n            case 'n':\n                next('n');\n                next('u');\n                next('l');\n                next('l');\n                return null;\n            case 'I':\n                next('I');\n                next('n');\n                next('f');\n                next('i');\n                next('n');\n                next('i');\n                next('t');\n                next('y');\n                return Infinity;\n            case 'N':\n              next( 'N' );\n              next( 'a' );\n              next( 'N' );\n              return NaN;\n            }\n            error(\"Unexpected \" + renderChar(ch));\n        },\n\n        value,  // Place holder for the value function.\n\n        array = function () {\n\n// Parse an array value.\n\n            var array = [];\n\n            if (ch === '[') {\n                next('[');\n                white();\n                while (ch) {\n                    if (ch === ']') {\n                        next(']');\n                        return array;   // Potentially empty array\n                    }\n                    // ES5 allows omitting elements in arrays, e.g. [,] and\n                    // [,null]. We don't allow this in JSON5.\n                    if (ch === ',') {\n                        error(\"Missing array element\");\n                    } else {\n                        array.push(value());\n                    }\n                    white();\n                    // If there's no comma after this value, this needs to\n                    // be the end of the array.\n                    if (ch !== ',') {\n                        next(']');\n                        return array;\n                    }\n                    next(',');\n                    white();\n                }\n            }\n            error(\"Bad array\");\n        },\n\n        object = function () {\n\n// Parse an object value.\n\n            var key,\n                object = {};\n\n            if (ch === '{') {\n                next('{');\n                white();\n                while (ch) {\n                    if (ch === '}') {\n                        next('}');\n                        return object;   // Potentially empty object\n                    }\n\n                    // Keys can be unquoted. If they are, they need to be\n                    // valid JS identifiers.\n                    if (ch === '\"' || ch === \"'\") {\n                        key = string();\n                    } else {\n                        key = identifier();\n                    }\n\n                    white();\n                    next(':');\n                    object[key] = value();\n                    white();\n                    // If there's no comma after this pair, this needs to be\n                    // the end of the object.\n                    if (ch !== ',') {\n                        next('}');\n                        return object;\n                    }\n                    next(',');\n                    white();\n                }\n            }\n            error(\"Bad object\");\n        };\n\n    value = function () {\n\n// Parse a JSON value. It could be an object, an array, a string, a number,\n// or a word.\n\n        white();\n        switch (ch) {\n        case '{':\n            return object();\n        case '[':\n            return array();\n        case '\"':\n        case \"'\":\n            return string();\n        case '-':\n        case '+':\n        case '.':\n            return number();\n        default:\n            return ch >= '0' && ch <= '9' ? number() : word();\n        }\n    };\n\n// Return the json_parse function. It will have access to all of the above\n// functions and variables.\n\n    return function (source, reviver) {\n        var result;\n\n        text = String(source);\n        at = 0;\n        lineNumber = 1;\n        columnNumber = 1;\n        ch = ' ';\n        result = value();\n        white();\n        if (ch) {\n            error(\"Syntax error\");\n        }\n\n// If there is a reviver function, we recursively walk the new structure,\n// passing each name/value pair to the reviver function for possible\n// transformation, starting with a temporary root object that holds the result\n// in an empty key. If there is not a reviver function, we simply return the\n// result.\n\n        return typeof reviver === 'function' ? (function walk(holder, key) {\n            var k, v, value = holder[key];\n            if (value && typeof value === 'object') {\n                for (k in value) {\n                    if (Object.prototype.hasOwnProperty.call(value, k)) {\n                        v = walk(value, k);\n                        if (v !== undefined) {\n                            value[k] = v;\n                        } else {\n                            delete value[k];\n                        }\n                    }\n                }\n            }\n            return reviver.call(holder, key, value);\n        }({'': result}, '')) : result;\n    };\n}());\n\n// JSON5 stringify will not quote keys where appropriate\nJSON5.stringify = function (obj, replacer, space) {\n    if (replacer && (typeof(replacer) !== \"function\" && !isArray(replacer))) {\n        throw new Error('Replacer must be a function or an array');\n    }\n    var getReplacedValueOrUndefined = function(holder, key, isTopLevel) {\n        var value = holder[key];\n\n        // Replace the value with its toJSON value first, if possible\n        if (value && value.toJSON && typeof value.toJSON === \"function\") {\n            value = value.toJSON();\n        }\n\n        // If the user-supplied replacer if a function, call it. If it's an array, check objects' string keys for\n        // presence in the array (removing the key/value pair from the resulting JSON if the key is missing).\n        if (typeof(replacer) === \"function\") {\n            return replacer.call(holder, key, value);\n        } else if(replacer) {\n            if (isTopLevel || isArray(holder) || replacer.indexOf(key) >= 0) {\n                return value;\n            } else {\n                return undefined;\n            }\n        } else {\n            return value;\n        }\n    };\n\n    function isWordChar(c) {\n        return (c >= 'a' && c <= 'z') ||\n            (c >= 'A' && c <= 'Z') ||\n            (c >= '0' && c <= '9') ||\n            c === '_' || c === '$';\n    }\n\n    function isWordStart(c) {\n        return (c >= 'a' && c <= 'z') ||\n            (c >= 'A' && c <= 'Z') ||\n            c === '_' || c === '$';\n    }\n\n    function isWord(key) {\n        if (typeof key !== 'string') {\n            return false;\n        }\n        if (!isWordStart(key[0])) {\n            return false;\n        }\n        var i = 1, length = key.length;\n        while (i < length) {\n            if (!isWordChar(key[i])) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    }\n\n    // export for use in tests\n    JSON5.isWord = isWord;\n\n    // polyfills\n    function isArray(obj) {\n        if (Array.isArray) {\n            return Array.isArray(obj);\n        } else {\n            return Object.prototype.toString.call(obj) === '[object Array]';\n        }\n    }\n\n    function isDate(obj) {\n        return Object.prototype.toString.call(obj) === '[object Date]';\n    }\n\n    var objStack = [];\n    function checkForCircular(obj) {\n        for (var i = 0; i < objStack.length; i++) {\n            if (objStack[i] === obj) {\n                throw new TypeError(\"Converting circular structure to JSON\");\n            }\n        }\n    }\n\n    function makeIndent(str, num, noNewLine) {\n        if (!str) {\n            return \"\";\n        }\n        // indentation no more than 10 chars\n        if (str.length > 10) {\n            str = str.substring(0, 10);\n        }\n\n        var indent = noNewLine ? \"\" : \"\\n\";\n        for (var i = 0; i < num; i++) {\n            indent += str;\n        }\n\n        return indent;\n    }\n\n    var indentStr;\n    if (space) {\n        if (typeof space === \"string\") {\n            indentStr = space;\n        } else if (typeof space === \"number\" && space >= 0) {\n            indentStr = makeIndent(\" \", space, true);\n        } else {\n            // ignore space parameter\n        }\n    }\n\n    // Copied from Crokford's implementation of JSON\n    // See https://github.com/douglascrockford/JSON-js/blob/e39db4b7e6249f04a195e7dd0840e610cc9e941e/json2.js#L195\n    // Begin\n    var cx = /[\\u0000\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n        escapable = /[\\\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n        meta = { // table of character substitutions\n        '\\b': '\\\\b',\n        '\\t': '\\\\t',\n        '\\n': '\\\\n',\n        '\\f': '\\\\f',\n        '\\r': '\\\\r',\n        '\"' : '\\\\\"',\n        '\\\\': '\\\\\\\\'\n    };\n    function escapeString(string) {\n\n// If the string contains no control characters, no quote characters, and no\n// backslash characters, then we can safely slap some quotes around it.\n// Otherwise we must also replace the offending characters with safe escape\n// sequences.\n        escapable.lastIndex = 0;\n        return escapable.test(string) ? '\"' + string.replace(escapable, function (a) {\n            var c = meta[a];\n            return typeof c === 'string' ?\n                c :\n                '\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n        }) + '\"' : '\"' + string + '\"';\n    }\n    // End\n\n    function internalStringify(holder, key, isTopLevel) {\n        var buffer, res;\n\n        // Replace the value, if necessary\n        var obj_part = getReplacedValueOrUndefined(holder, key, isTopLevel);\n\n        if (obj_part && !isDate(obj_part)) {\n            // unbox objects\n            // don't unbox dates, since will turn it into number\n            obj_part = obj_part.valueOf();\n        }\n        switch(typeof obj_part) {\n            case \"boolean\":\n                return obj_part.toString();\n\n            case \"number\":\n                if (isNaN(obj_part) || !isFinite(obj_part)) {\n                    return \"null\";\n                }\n                return obj_part.toString();\n\n            case \"string\":\n                return escapeString(obj_part.toString());\n\n            case \"object\":\n                if (obj_part === null) {\n                    return \"null\";\n                } else if (isArray(obj_part)) {\n                    checkForCircular(obj_part);\n                    buffer = \"[\";\n                    objStack.push(obj_part);\n\n                    for (var i = 0; i < obj_part.length; i++) {\n                        res = internalStringify(obj_part, i, false);\n                        buffer += makeIndent(indentStr, objStack.length);\n                        if (res === null || typeof res === \"undefined\") {\n                            buffer += \"null\";\n                        } else {\n                            buffer += res;\n                        }\n                        if (i < obj_part.length-1) {\n                            buffer += \",\";\n                        } else if (indentStr) {\n                            buffer += \"\\n\";\n                        }\n                    }\n                    objStack.pop();\n                    buffer += makeIndent(indentStr, objStack.length, true) + \"]\";\n                } else {\n                    checkForCircular(obj_part);\n                    buffer = \"{\";\n                    var nonEmpty = false;\n                    objStack.push(obj_part);\n                    for (var prop in obj_part) {\n                        if (obj_part.hasOwnProperty(prop)) {\n                            var value = internalStringify(obj_part, prop, false);\n                            isTopLevel = false;\n                            if (typeof value !== \"undefined\" && value !== null) {\n                                buffer += makeIndent(indentStr, objStack.length);\n                                nonEmpty = true;\n                                key = isWord(prop) ? prop : escapeString(prop);\n                                buffer += key + \":\" + (indentStr ? ' ' : '') + value + \",\";\n                            }\n                        }\n                    }\n                    objStack.pop();\n                    if (nonEmpty) {\n                        buffer = buffer.substring(0, buffer.length-1) + makeIndent(indentStr, objStack.length) + \"}\";\n                    } else {\n                        buffer = '{}';\n                    }\n                }\n                return buffer;\n            default:\n                // functions and undefined should be ignored\n                return undefined;\n        }\n    }\n\n    // special case...when undefined is used inside of\n    // a compound object/array, return null.\n    // but when top-level, return undefined\n    var topLevelHolder = {\"\":obj};\n    if (obj === undefined) {\n        return getReplacedValueOrUndefined(topLevelHolder, '', true);\n    }\n    return internalStringify(topLevelHolder, '', true);\n};\n","var JSON5 = require(\"json5\");\n\nfunction parseQuery(query) {\n  var specialValues = {\n    'null': null,\n    'true': true,\n    'false': false\n  };\n  if(!query) return {};\n  if(typeof query !== \"string\")\n    throw new Error(\"parseQuery should get a string as first argument\");\n  if(query.substr(0, 1) !== \"?\")\n    throw new Error(\"a vaild query string passed to parseQuery should begin with '?'\");\n  query = query.substr(1);\n  if(query.substr(0, 1) === \"{\" && query.substr(-1) === \"}\") {\n    return JSON5.parse(query);\n  }\n  var queryArgs = query.split(/[,\\&]/g);\n  var result = {};\n  queryArgs.forEach(function(arg) {\n    var idx = arg.indexOf(\"=\");\n    if(idx >= 0) {\n      var name = arg.substr(0, idx);\n      var value = decodeURIComponent(arg.substr(idx+1));\n      if (specialValues.hasOwnProperty(value)) {\n        value = specialValues[value];\n      }\n      if(name.substr(-2) === \"[]\") {\n        name = decodeURIComponent(name.substr(0, name.length-2));\n        if(!Array.isArray(result[name]))\n          result[name] = [];\n        result[name].push(value);\n      } else {\n        result[name] = value;\n      }\n    } else {\n      if(arg.substr(0, 1) === \"-\") {\n        result[arg.substr(1)] = false;\n      } else if(arg.substr(0, 1) === \"+\") {\n        result[arg.substr(1)] = true;\n      } else {\n        result[arg] = true;\n      }\n    }\n  });\n  return result;\n};\n\nmodule.exports = parseQuery;\n","/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\n\n'use strict';\n\n// Generate an internal UID to make the regexp pattern harder to guess.\nvar UID                 = Math.floor(Math.random() * 0x10000000000).toString(16);\nvar PLACE_HOLDER_REGEXP = new RegExp('\"@__(F|R|D)-' + UID + '-(\\\\d+)__@\"', 'g');\n\nvar IS_NATIVE_CODE_REGEXP = /\\{\\s*\\[native code\\]\\s*\\}/g;\nvar IS_PURE_FUNCTION = /function.*?\\(/;\nvar UNSAFE_CHARS_REGEXP   = /[<>\\/\\u2028\\u2029]/g;\n\nvar RESERVED_SYMBOLS = ['*', 'async'];\n\n// Mapping of unsafe HTML and invalid JavaScript line terminator chars to their\n// Unicode char counterparts which are safe to use in JavaScript strings.\nvar ESCAPED_CHARS = {\n    '<'     : '\\\\u003C',\n    '>'     : '\\\\u003E',\n    '/'     : '\\\\u002F',\n    '\\u2028': '\\\\u2028',\n    '\\u2029': '\\\\u2029'\n};\n\nfunction escapeUnsafeChars(unsafeChar) {\n    return ESCAPED_CHARS[unsafeChar];\n}\n\nmodule.exports = function serialize(obj, options) {\n    options || (options = {});\n\n    // Backwards-compatibility for `space` as the second argument.\n    if (typeof options === 'number' || typeof options === 'string') {\n        options = {space: options};\n    }\n\n    var functions = [];\n    var regexps   = [];\n    var dates     = [];\n\n    // Returns placeholders for functions and regexps (identified by index)\n    // which are later replaced by their string representation.\n    function replacer(key, value) {\n        if (!value) {\n            return value;\n        }\n\n        // If the value is an object w/ a toJSON method, toJSON is called before\n        // the replacer runs, so we use this[key] to get the non-toJSONed value.\n        var origValue = this[key];\n        var type = typeof origValue;\n\n        if (type === 'object') {\n            if(origValue instanceof RegExp) {\n                return '@__R-' + UID + '-' + (regexps.push(origValue) - 1) + '__@';\n            }\n\n            if(origValue instanceof Date) {\n                return '@__D-' + UID + '-' + (dates.push(origValue) - 1) + '__@';\n            }\n        }\n\n        if (type === 'function') {\n            return '@__F-' + UID + '-' + (functions.push(origValue) - 1) + '__@';\n        }\n\n        return value;\n    }\n\n    function serializeFunc(fn) {\n      var serializedFn = fn.toString();\n      if (IS_NATIVE_CODE_REGEXP.test(serializedFn)) {\n          throw new TypeError('Serializing native function: ' + fn.name);\n      }\n\n      // pure functions, example: {key: function() {}}\n      if(IS_PURE_FUNCTION.test(serializedFn)) {\n          return serializedFn;\n      }\n\n      var argsStartsAt = serializedFn.indexOf('(');\n      var def = serializedFn.substr(0, argsStartsAt)\n        .trim()\n        .split(' ')\n        .filter(function(val) { return val.length > 0 });\n\n      var nonReservedSymbols = def.filter(function(val) {\n        return RESERVED_SYMBOLS.indexOf(val) === -1\n      });\n\n      // enhanced literal objects, example: {key() {}}\n      if(nonReservedSymbols.length > 0) {\n          return (def.indexOf('async') > -1 ? 'async ' : '') + 'function'\n            + (def.join('').indexOf('*') > -1 ? '*' : '')\n            + serializedFn.substr(argsStartsAt);\n      }\n\n      // arrow functions\n      return serializedFn;\n    }\n\n    var str;\n\n    // Creates a JSON string representation of the value.\n    // NOTE: Node 0.12 goes into slow mode with extra JSON.stringify() args.\n    if (options.isJSON && !options.space) {\n        str = JSON.stringify(obj);\n    } else {\n        str = JSON.stringify(obj, options.isJSON ? null : replacer, options.space);\n    }\n\n    // Protects against `JSON.stringify()` returning `undefined`, by serializing\n    // to the literal string: \"undefined\".\n    if (typeof str !== 'string') {\n        return String(str);\n    }\n\n    // Replace unsafe HTML and invalid JavaScript line terminator chars with\n    // their safe Unicode char counterpart. This _must_ happen before the\n    // regexps and functions are serialized and added back to the string.\n    if (options.unsafe !== true) {\n        str = str.replace(UNSAFE_CHARS_REGEXP, escapeUnsafeChars);\n    }\n\n    if (functions.length === 0 && regexps.length === 0 && dates.length === 0) {\n        return str;\n    }\n\n    // Replaces all occurrences of function, regexp and date placeholders in the\n    // JSON string with their string representations. If the original value can\n    // not be found, then `undefined` is used.\n    return str.replace(PLACE_HOLDER_REGEXP, function (match, type, valueIndex) {\n        if (type === 'D') {\n            return \"new Date(\\\"\" + dates[valueIndex].toISOString() + \"\\\")\";\n        }\n\n        if (type === 'R') {\n            return regexps[valueIndex].toString();\n        }\n\n        var fn           = functions[valueIndex];\n\n        return serializeFunc(fn);\n    });\n}\n","import parseQuery from \"webpack-parse-query\";\nimport serialize from \"serialize-javascript\";\n\nfunction generateCode(source, ctx) {\n  let code = \"\";\n  const query = parseQuery(ctx.resourceQuery);\n  const story = {\n    template: source.trim(),\n    name: query.name,\n    group: query.group,\n    methods: query.methods,\n    notes: query.notes,\n    knobs: query.knobs\n  };\n\n  code += `function (Component) {\n    Component.options.__stories = Component.options.__stories || []\n    Component.options.__stories.push(${serialize(story)})\n  }\\n`;\n  return code;\n}\n\nexport default function loader(source) {\n  const story = generateCode(source, this);\n  this.callback(null, `module.exports = ${story}`);\n}\n","function upperFirst(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nfunction camelCase(str) {\n  let s =\n    str &&\n    str\n      .match(\n        /[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g\n      )\n      .map(x => x.slice(0, 1).toUpperCase() + x.slice(1).toLowerCase())\n      .join(\"\");\n  return s.slice(0, 1).toLowerCase() + s.slice(1);\n}\n\nfunction parseKnobsObject(obj, plugins) {\n  return Function(`return ({text, boolean, select, color}) => (${obj})`)()(\n    plugins\n  );\n}\n\nfunction getComponentNameFromFilename(fileName) {\n  return upperFirst(\n    camelCase(fileName.replace(/^\\.\\/[\\W_]*?/, \"\").replace(/\\.\\w+$/, \"\"))\n  );\n}\n\nexport {\n  camelCase,\n  upperFirst,\n  parseKnobsObject,\n  getComponentNameFromFilename\n};\n","import {\n  upperFirst,\n  camelCase,\n  parseKnobsObject,\n  getComponentNameFromFilename\n} from \"./util\";\n\nexport default function registerStories(req, fileName, sbInstance, plugins) {\n  const { action, withKnobs, text, color, select, boolean } = plugins;\n  const componentConfig = req(fileName);\n  const componentName = getComponentNameFromFilename(fileName);\n\n  const stories =\n    componentConfig.__stories || componentConfig.default.__stories;\n  if (!stories) return;\n  stories.forEach(story => {\n    const storiesOf = sbInstance(story.group || \"vue-storybook\", module);\n    const componentFunc = () => {\n      let data = story.knobs\n        ? parseKnobsObject(story.knobs, {\n            boolean,\n            text,\n            select,\n            color\n          })\n        : {};\n      return {\n        components: {\n          [componentName]: componentConfig.default || componentConfig\n        },\n        props: data,\n        template: story.template,\n        methods: {\n          action(name, ...payload) {\n            action(name)(...payload);\n          }\n        }\n      };\n    };\n\n    story.knobs ? storiesOf.addDecorator(withKnobs) : false;\n\n    storiesOf.add(story.name, componentFunc, {\n      notes: story.notes\n    });\n  });\n}\n","import storyLoader from \"./loader\";\nimport registerStories from \"./register\";\n\nexport { registerStories, storyLoader };\nexport default storyLoader;\n"]}